- VirtualBox
https://www.virtualbox.org/

- Ubuntu
https://releases.ubuntu.com/20.04/

==============================================
Ubuntu에 Redis 설치
==============================================

1. apt-get 업데이트
$ sudo apt-get update
$ sudo apt-get upgrade

2. 설치
$ sudo apt-get install redis-server

3. 설치 완료 후 버전 확인
$ redis-server --version

4. 설정
$ sudo vi /etc/redis/redis.conf
	maxmemory 1g
	memory-policy allkeys-lru

5. 설정 적용되도록 Redis를 재시작
$ sudo systemctl restart redis-server.service

6. 기본 포트(6379) 확인
$ netstat -nlpt | grep 6379

7. Redis 서버 접속
$ redis-cli
127.0.0.1: 6379> 

==============================================================

==============================================
Ubuntu(20.04)에 Mongo DB(4.4) 설치
==============================================

- Ubuntu 버전 확인
$ lsb_release -dc

- 패키지 관리 시스템에서 사용하는 public key
$ wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -
OK
- MongoDB 리스트 파일 만들기 : 
$ echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list

- 로컬 패키지 데이터베이스 불러오기
$ sudo apt-get update

- MongoDB 패키지 설치하기
$ sudo apt-get install -y mongodb-org

- MongoDB 실행/관리용 init 시스템 확인
  프로세스를 실행하고 관리하기 위해서 운영체제에 내장된 init 시스템 사용.
  최신 버전의 우분투는 보통 systemd (systemctl)을 사용하지만, System V Init (service)를 사용하는 경우도 있다.
  터미널에 다음 명령어를 실행해 사용 중인 init 시스템을 확인.
$ ps --no-headers -o comm 1
  => systemd  - systemd (systemctl) 사용

- MongoDB 실행
$ sudo systemctl start mongod : daemon process

- MongoDB 실행되었는지 확인
$ sudo systemctl status mongod

- MongoDB가 시스템 재부팅 후 시작되도록 설정
$ sudo systemctl enable mongod

- MongoDB 프로세스 중지 
$ sudo systemctl stop mongod

- MongoDB 다시 시작
$ sudo systemctl restart mongod

- MongoDB에 접속
$ mongo
> ............

* mongo shell을 실행하면 27017 포트(default port)로 localhost에서 실행 중인 mongod에 연결
* mongod: MongoDB 시스템에서 가장 대표적인 작업 데몬 프로세스. mongod를 통해 데이터를 요청하고, 데이터 접근을 관리하고, 
          백그라운드 관리 작업에 대한 수행을 한다. 
	  MongoDB는 결국 mongod 프로세스를 띄우고, 운영하고, 종료하는 과정으로 진행된다.

* mongo: mongod를 관리하는 자바스크립트 기반 Shell 프로그램.

===================================================================================================

Mongo DB : JSON data format

JSON: JavaScript Object Notation : 
Web 환경: 이기종 컴퓨터 간에 data 공유하기 위한 데이터 표준


{"a": 4, "b": 5, "c": 6 }
{"a": 6, "b": 7, "fruit": ["apple", "banana", "mellon"]}


RDBMS table
행, 열 2차원 테이블
field

==============================================================

- 데이터베이스 생성
> use test  : test 라는 데이터베이스 생성
switched to db test


- MongoDB 의 데이터 모델 3 계층
* 데이터베이스(Database): 서버 당 여러개의 데이터베이스 존재 가능            # RDBMS database
* 컬렉션(Collection): XML, JSON, CSV(Comma Seperated Value) 텍스트 파일을 컬렉션으로 변환 가능  #  RDBMS table
* 문서(Document):	 {"key" : "value", .....}	# RDBMS record(row)

- db 생성
> use test : db name은 test
> db : 현재 사용중인 db 확인
> show dbs: 내가 만든 데이터베이스 리스트 확인
> db.things.insert({"name": "MongoDB", "author": "pmk"});
> show dbs: 최소 한개의 Document를 추가해야 함.

- 다큐먼트 삽입
> db.things.save() : things(이 없을 경우) things 라는 컬렉션 생성.
> db.things.find() : 삽입한 다큐먼트 찾기
> db.things.save( {a:3, b:2, c:3, d:200} )    : 필드 d를 새롭게 추가하는 document. 
						mongoDB는 스키마를 갖지 않으면서 2개의 다큐먼트가 동일한 컬렉션에 동시에 존재
> db.things.find() : 2개의 다큐먼트가 존재하는 것 확인
> db.things.find( {a:1} ) : 특정 조건을 사용하여 다큐먼트 검색

- 현재 사용중인 데이터베이스, 컬렉션 목록 확인
> show dbs
> show collections




========================================================================================================

- MongoDB 에는 schema가 없다.    

- Mongo DB 는 동적인 schema를 갖는다.

- MongoDB 의 CRUD(Create, Read, Update, Delete)
* Mongo DB는 JSON 스타일의 field(key), Value(값)을 조합된 document 형식으로 저장.
* BSON(Binary JSON) 


- 데이터 처리 기본 동작
* Query 사용
	 *collection*    *Query criteria      * Modifier
	db.users.find( { age: 20} } ).sort( { age: 1 } )

-----------------------------------------------------------------------------

* Create
db.collection.insert()

db.users.insert({name:"kim", age: 19, status: "A", group: ["music", "dance"]})
db.users.insert({name:"lee", age: 25, status: "B", group: ["sports", "music"]})
db.users.insert({name:"park", age: 31, status: "C", group: ["photo", "travel"]})
db.users.insert({name:"cho", age: 25, status: "D", group: ["music", "video"]})
db.users.insert({name:"jung", age: 27, status: "B", group: ["kpop", "dance"]})
db.users.insert({name:"nam", age: 20, status: "B", group: ["computer", "dance"]})
db.users.insert({name:"choi", age: 29, status: "A", group: ["toon", "programming"]})

--------------------------------------------------------------------------
var mydocuments = 
	[ 
		{
			item: "ABC2", 
			details: {model:"2014Q3", manu: "M1 corp."},
			stock: [{size: "M", qty: 50}],
			category: "clothing"
		},
		{
			item: "MNO2", 
			details: {model:"2014Q3", manu: "ABC corp."},
			stock: [{size: "s", qty: 5}, {size: "m", qty:5}, {size: "L", qty: 1 }],
			category: "clothing"
		},
		{
			item: "IJK2", 
			details: {model:"2014Q3", manu: "M5 corp."},
			stock: [{size: "s", qty: 5}, {size: "L", qty: 1 }],
			category: "housewear"
		}
	];


db.inventory.insert(mydocuments);
db.inventory.find()
db.inventory.find().pretty()
--------------------------------------------------------------------

- Bulk 활용 다중 document 삽입
var bulk = db.inventory.initializeUnorderedBulkOp();

bulk.insert(
	{
		item: "BE10",
		details: { model:"2014Q3", manu: "XYZ com." },
		stock: [{size: "L", qty: 5}],
		category: "clothing"
	}
);

bulk.insert(
	{
		item: "ZYT0",
		details: { model:"2014Q1", manu: "ABC com." },
		stock: [{size: "s", qty: 5}, {size: "m", qty: 5}],
		category: "housewear"
	}
);

bulk.execute();			


Query : 조회하다, 문의하다, 
select studno, sname from student where sname = "nyw";

--------------------------------------------------------------------------

* Read 
- db.collection.find()
- document 식별 기준, 조건(condition) 설정 가능
	 *collection*    *Query criteria      * Modifier
	db.users.find( { age: {$gt : 18} } ).sort( { age: 1 } )
 * RDBMS : select * from users where age > 18 order by age;


- limit, skip, sort order 사용하여 quedbry 변형하여 사용.
	db.users.find(
		{ age: {$gt: 18}},
		{ name: 1, address: 1}
	).limit(5)
 * RDBMS : select name, address from users where age > 18; 

- projection # column 제한  select aaa, bbb from table;
	  *collection   *Query 기준    *projection
	db.users.find({age:20}, {name: 1, _id: 0} ) 

* grades
db.grade.find({grade: {$gte: 80, $lte: 90} } )
------------------------------------------------------------
* Update   # update from users set status = "A" where age > 18;
db.users.update(
	{ age: { $gt: 18} },        # 업데이트 기준
	{ $set: { status: "A" }  },   #  업데이트 액션
	{ multi: true  },      # 업데이트 옵션, 쿼리와 일치되는 모든 다큐먼트 업데이트
	//{ upsert: true }      # 쿼리 부분과 일치하는 다큐먼트가 없으면 새로운 다큐먼트 생성, 
                                      # 일치하는 다큐먼트가 있으면 해당 다큐먼트를 업데이트.
)


* Delete
db.users.remove(
	{ status: "D" }
)
---------------------------------------------------
db.inventory.insert(
		{type:"food", 
		item: "xyz", 
		qty: 25, 
		price: 2.5, 
		ratings: [5, 8, 9],
		memos: [ {memo:"on time", by:"shipping"}, {memo:"approved", by:"billing"} ]})

db.inventory.insert(
		{type:"fruit", 
		item: "jkl", 
		qty: 10, 
		price: 4.25, 
		ratings: [5, 9],
		memos: [ {memo:"on time", by:"payment"}, {memo:"delayed", by:"shipping"}]} )

db.inventory.find().pretty()

* 배열 인덱스를 사용하여 내장 다큐먼트의 필드와 일치하는 것 검색
db.inventory.find( { 'memos.0.by': 'shipping' } )

* 배열 인덱스를 지정하지 않고 필드와 일치하는 것 검색
db.inventory.find( { 'memos.by': 'shipping' } )

* 다큐먼트 배열에 여러 기준 적용
	- 하나의 항목이 기준 만족하는 경우
	  db.inventory.find( { memos: { $elemMatch: { memo: 'on time', by" 'shipping' } } } )
	- 항목들의 조합이 기준 만족하는 경우
	  db.inventory.find( { 'memos.memo': 'on time', 
	                       'memos.by': 'shipping'
			     }
			   )


---------------------------------------------------
외부 데이터 가져오기

$ mongoimport -d students -c grade < grade.json

> use students
> db.grade.count();
> db.grade.find().pretty()

* grades 컬렉션에서 grade가 80 이상, 90 이하 인 다큐먼트를 반환하는 문장		# $gte : 80, $lt : 90  
	db.grades.find({grade: {$gte: 80, $lt: 90})

* grades 컬렉션에서 student가 Susan인 다큐먼트 중 grade 값 가져오기
	db.grades.find({"student": "Susan"}, {"grade": 1})
* grades 컬렉션에서 student가 Steve인 다큐먼트 중 grade 값 제외하고 가져오기
	db.grades.find({"student": "Susan"}, {"grade": 0})
* grades 컬렉션에서 student가 Steve인 다큐먼트 중 _id 필드를 제외한 모든 값 가져오기
	
- Cursor 사용

var myCursor = db.grades.find({student: " Steve"})
myCursor

while(myCursor.hasNext()) {
	print( tojson(myCursor.next()));
}


=======================================================

Mongo DB 활용 데이터 분석

* data.go.kr

==================================================================













mongoimport --port 27017 -u "admin" -p 'test' --authenticationDatabase "admin" --type csv -d test_db -c test_collection --headerline --drop test.csv





mongoimport --type csv -d test_db -c test_collection --headerline --drop test.csv
mongoexport --db users --collection contacts --type=csv 
		--fields name,address --out /opt/backups/contacts.csv


데이터 추출은 JSON 또는 CSV 파일로 가능하다. (Default : JSON)

CSV 파일로 데이터를 추출하고자 할 경우 --out <file> 에서 파일명을 .csv로 끝나는 이름으로 지정해 주어야 한다.







=================================================
MongoDB 설치
===============================================

# vi /etc/yum.repos.d/mongodb-org-5.0.repo

[mongodb-org-5.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/5.0/x86_64
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-5.0.asc




# yum install mongodb-org

===============================================
MongoDB 서비스 시작
==============================================
# systenctl start mongod
# systemctl enable mongod
# systemctl status mongod

================================================
MongoDB  설정 및 구성
===============================================
* MongoDB 관리자 생성

# mongo

> use admin

* 관리자 계정
> db.createUser({
	user: "admin",  #  계정명
	pwd: "1111",  # 비밀번호
	roles: [        # 권한 목록
		{
			role:"userAdminAnyDatabase",   # root 권한
			db: : "admin"                    # admin 데이터베이스에 대한 권한
		}
	]}
)

* 일반 사용자 계정

> db.createUser({
	user: "pmk",
	pwd: "pmk",
	roles: [
		{
			role:"readWrite",       # 읽기, 쓰기 권한
			db: : "test"              # 데이터베이스로 test 지정
		}
	]}
)

> show users


> quit()



